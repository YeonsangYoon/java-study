package com.sist.temp2;
/*
 *    자바 정리 => 웹관련 
 *    ---------------
 *    1) 변수 (25page)
 *       --------------------------------------------
 *                         메모리에 저장되는 시점   사용범위
 *                         초기화되는 시점
 *       --------------------------------------------
 *       맴버변수
 *       (인스턴스 변수)        메모리 할당시
 *                        1. new
 *                        2. Class.forName()
 *                        
 *       class ClassName
 *       {
 *          [접근지정어] 데이터형 변수명
 *          --------- 데이터를 보호 목적으로 은닉화(보통 private)
 *       }
 *       변수 => 메모리에 저장 / 읽기 (getter/setter)
 *       => 사용법
 *          클래스 객체명=new 클래스명();
 *          객체명.변수명
 *       --------------------------------------------
 *       정적변수
 *       (공유변수,클래스변수)     컴파일시
 *                          JVM이 클래스 읽기
 *                          => 메모리 할당이 자동
 *       => 인스턴스 생성 없이 사용
 *       => 클래스명.변수명
 *       => 여러명이 같은 변수를 이용할 때 주로 사용
 *          (웹 => 로고, 이미지 크기...)
 *           서버 => 클라이언트 정보(IP)
 *       --------------------------------------------
 *       지역변수
 *       우선 => 변수명이 동일할때 우선 순위
 *       => 지역변수, 매개변수
 *          ------ 반드시 초기화후에 사용
 *       --------------------------------------------
 *    
 *    2) 데이터형
 *       ---------------------------------------
 *        정수형
 *             byte : 네트워크 통신, 파일 입출력, 웹
 *                    ------------------------
 *                    ASC코드를 주로 사용(char:1byte)
 *                    한글 => 멀티바이트(2byte) => Unicode
 *                           => UTF-8
 *                    => 사용범위 => -128~127
 *             int : default => 컴퓨터에서 인식 숫자(int인식)
 *             => 가장 많이 사용되는 정수형
 *             => 웹/윈도우는 정수를 인식하지 못한다(문자열)
 *                => 정수 변환 : Integer.parseInt("10")
 *             => 사용범위 : -21억 4천 ~ 21억 4천
 *             long : 빅데이터, 금융권, 회계 (국세청)
 *                    => -2^63 ~ 2^63-1
 *       ---------------------------------------
 *        실수형(double) : 소수점 15자리 이상 사용
 *             => 컴퓨터 인식은 실수일 경우
 *       ---------------------------------------
 *        논리형(boolean) : true/false 저장 => 조건문, 제어문에 사용
 *       ---------------------------------------
 *        문자형(char) : Unicode(2byte)
 *                     문자 표현이 많다 => 각국의 언어 사용이 가능
 *                     *** 한글은 1글자당 2byte를 가지고 있다
 *                     리눅스/맥/윈도우 => 호환이 가능
 *       ---------------------------------------
 *        참조형 : 주소를 이용해서 데이터를 관리
 *           배열 => 같은 데이터형만 저장이 가능
 *           클래스 => 다른 데이터형을 저장이 가능
 *       ---------------------------------------
 *       
 *       기본형의 크기
 *         byte < int < long < double
 *         => 수 표현에 따라 크기가 달라진다
 *       
 *       변수 생성 방법(식별자) => 같은 메소드상에서는 같은 변수가 존재하지 않는다
 *       = 식별자
 *         1) 알파벳/한글 사용 가능(대소문자 구분)
 *         2) 숫자 사용이 가능(앞에 사용 금지)
 *         3) 특수문자 사용(_, &)
 *         4) 키워드는 사용 불가(메소드명, 클래스명은 키워드가 아니다)
 *         5) 변수에 공백이 없다
 *       
 *       = 약속 사항
 *         1) 클래스/인터페이스명은 대문자로 시작
 *         2) 메소드명, 변수명은 소문자로 시작
 *         3) 두개이상의 단어로 만드는 경우(두번째 단어부터 대문자로 시작)
 *         
 *    3) 연산자
 *    자바에서 지원하는 연산자 (피연산자/연산자)
 *    단항연산자 : 피연산자가 한개일때
 *      = 증감연산자 (++, --)
 *         - 전위연산 : ++a => 참조하기 전 증가
 *         - 후위연산 : a++ => 참조하고난 후 증가
 *      = 부정연산자 : ! (조건문, 반복문에서 주로 사용)
 *      = 형변환연산자 : (데이터형)을 변수앞에 설정
 *         => boolean은 사용이 불가능
 *         => 클래스의 형변환
 *         => 모든 데이터형을 통합 가능(Object)
 *    이항연산자
 *      = 산술연산자 : 가장 많이 사용되는 연산자
 *        => + : 실제 산술 (덧셈), 문자열 결합
 *        => / : 0으로 나눌 수 없다
 *        => % : 왼쪽편의 부호를 따라간다
 *      = 비교연산자 : 조건문 => boolean
 *        == , != , < , > , <= , >=
 *      = 논리연산자 : &&, || 
 *         *** 효율적인 연산 : && 앞의 결과가 false, || 앞의 결과가 true 일때
 *      = 대입연산자 : 결과값 대입
 *        = , += , -=
 *    삼항연산자 : 웹에서 자주 사용(if-else를 줄일때 사용)
 *    
 *    
 *    자바에서 제공하는 제어문 : 프로그램에 따라 소스를 건너뛰거나 반복수행을 함
 *    => 조건문
 *         단일 조건문 : 독립적 수행문장(조건마다 따로 수행)
 *         --------
 *         형식)
 *            if(조건문) => 부정/비교/논리 연산자 사용
 *            {
 *               조건 => true일 경우 수행하는 문장
 *            }
 *         다중 조건문
 *         형식)
 *            if(조건문)
 *            {
 *               조건 : true일때 수행(false면 아래로이동)
 *            }
 *            else if(조건문)
 *            {
 *               조건 : true일때 수행(false면 아래로이동)
 *            }
 *            else if(조건문)
 *            {
 *               조건 : true일때 수행(false면 아래로이동)
 *            }
 *            else
 *            {
 *               모든 조건문이 false일때 최종적으로 수행
 *            }
 *            
 *    => 반복문
 *         반복횟수가 지정된 경우 : for
 *         형식)
 *             for(초기값;조건식;증가식)
 *             {
 *               반복 수행문
 *             }
 *             for(데이터형 변수 : 배열/컬렉션)
 *             {
 *               => 향상된 for, for-each
 *             }
 *             => 데이터형 변수는 형변환이 불가능
 *         반복횟수가 지정이 안된 경우 : while
 *            형식)
 *               초기값
 *               while(조건식)
 *               {
 *                  반복수행문장
 *                  증가식
 *               }
 *    => 반복제어문 : break => 반복문을 중단할때 사용
 *            for()
 *            {
 *               for()
 *               {
 *                  break; => 2차 for문만 종료
 *               }
 *               break; => 1차 for문만 종료
 *            }
 *      
 *    4) 메소드
 *      => 한가지 기능만 수행이 가능(재사용 목적)
 *      => 반복 수행을 제거
 *      => 구조적인 프로그램을 만들때 사용
 *         ------------- 단락을 나눠서 처리
 *         ------------- 에러 처리
 *         ------------- 수정시에
 *      형식)
 *         [접근지정어] [옵션] 리턴형 메소드명(매개변수 목록)
 *         {
 *         }
 *         접근지정어는 다른 통신을 담당 => 공개(public) 
 *         옵션 => static / abstract (선언부만 사용)
 *         
 *         예) 
 *            리턴형 : 결과값(처리) => 1개만 사용(없는 경우엔 void)
 *            매개변수 : 사용자 요청값 => 여러개 사용이 가능
 *            
 *     --------------------------------------------------
 *     메소드 유형         리턴형           매개변수
 *     --------------------------------------------------
 *                        O               O
 *     --------------------------------------------------
 *                        O               X
 *     --------------------------------------------------
 *                        X               O
 *     --------------------------------------------------
 *                        X               X
 *     --------------------------------------------------
 *     
 *     소스가 많기 때문에 나눠서 처리 할 경우에 주로 사용
 *     ----------------------------------------
 *     => 사용자 입력 처리
 *     => 사용자 요청 처리 => 여러개를 나눠서 처리가 가능
 *     => 사용자 출력 처리
 *     ---------------
 *     
 */
public class MainClass {
	public static void main(String[] args) {
		
	}
}
